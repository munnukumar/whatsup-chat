import crypto from "crypto";
import axios from "axios";
import WebSocket from "ws";

class TwinSDK {
  constructor({apiKey, apiSecret, clientId, baseUrl}) {
    this.apiKey = apiKey;
    this.apiSecret = apiSecret;
    this.baseUrl = baseUrl;
    this.clientId = clientId;
    this.brainId = null;
    this.currentQuery = null;
    this.isInitalize = false;
    this.initQuery = "Hello";
    this.twinName = null;
    this.currentWordLimit = 100;
    this.category = "general";
    this.ws = null;

    this.httpClient = axios.create({
      baseURL: this.baseUrl,
      headers: {
        "Content-Type": "application/json",
        "API-Key": this.apiKey,
      },
    });
  }

  // use request as  it is

  queryFrame(
    query,
    twinName = this.twinName,
    wordLimit = this.currentWordLimit,
    brainId = this.brainId,
    category = this.category,
  ) {
    return {
      query: query,
      twinName: twinName,
      wordLimit: wordLimit,
      brainId: brainId,
      category: category,
    };
  }

  async request(method, endpoint, payload) {
    const timestamp = Date.now().toString();
    const signature = this.sign(timestamp, { apikey: this.apiKey, clientid: this.clientId});
    try {
      const response = await this.httpClient.request({
        method,
        url: endpoint,
        headers: {
          timestamp: timestamp,
          signature: signature,
          apikey: this.apiKey,
          clientid: this.clientId
        },
        data:payload,
      });
      return response.data;
    } catch (error) {
      if (error.response) {
        throw new Error(
          `HTTP error! status: ${error.response.status} - ${error.response.data.message}`
        );
      } else {
        throw new Error(`Request failed: ${error.message}`);
      }
    }
  }

  sign(timestamp, data) {
    const message = this.apiKey + timestamp + JSON.stringify(data);
    return crypto
      .createHmac("sha256", this.apiSecret)
      .update(message)
      .digest("hex");
  }

  async init(brainId, twinName) {
    this.brainId = brainId;
    this.twinName = twinName;
    let res = "";
    const {
      success = false,
      message = "",
      data = null,
    } = await this.request("POST", "/v1/chat/twin", {...this.queryFrame(this.initQuery, this.twinName, this.wordLimit, this.brainId)}).catch((e) => {
      console.log({
        error: e.message,
      });
      res = `initalization failed | ${e.message} `;
    });

    if (success) {
      // connect websocket
      await this.connectToWebsocket();
      res = "initalization done";
      this.isInitalize = true;
      console.log('SDK initialized successfully!')
    }

    return { message: res, status: this.isInitalize };
  }

  async query(query = this.initQuery) {
    if (this.isInitalize) {
      const {
        success = false,
        message = "",
        data = null,
      } = await this.request("POST", "/v1/chat/twin", {...this.queryFrame(query)}).catch((e) => {
        console.log({
          error: e.message,
        });
        res = `chat failed  | ${e.message} `;
        this.isInitalize = false;
      });

      if (success) {
        return { message: data, status: true };
      }else{
        return { message: "Something went wrong!", status: false};
      }
  
    }else{
      return { message: "TwinSDK is not initalized", success: false };
    }
  }

  async connectToWebsocket() {
    let timestamp = Date.now().toString();
    let data = {
      apikey: this.apiKey,
      clientid: this.clientId
    }
    let signature = this.sign(timestamp, data);

    return new Promise((resolve, reject) => {
      this.ws = new WebSocket(`ws://localhost:8010?apikey=${this.apiKey}&signature=${signature}&timestamp=${timestamp}&clientid=${this.clientId}`);
  
      this.ws.onopen = () => {
        console.log('WebSocket connection established');
        resolve();
      };
  
      this.ws.onerror = (error) => {
        console.error('WebSocket error:', error);
        reject(error);
      };
    });
  }
  
  async queryWebsocket(query = this.initQuery, type, brainId, twinName) {
    const msg = {
      query,
      brainId: brainId,
      twinName: twinName,
      wordLimit: 100,
      type: type
    };
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      try {
        await this.connectToWebsocket();
      } catch (error) {
        throw error;
      }
    }
  
    this.ws.send(JSON.stringify(msg));
  
    // Wait for a response from the WebSocket server
    return new Promise((resolve, reject) => {
      this.ws.onmessage = (event) => {
        const response = JSON.parse(event.data);
        console.log(response)
        resolve(response);
      };
  
      this.ws.onerror = (error) => {
        console.error('WebSocket error:', error);
        reject(error);
      };
    });
  }

  closeWebSocket() {
    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }
  }
}

export default TwinSDK;
